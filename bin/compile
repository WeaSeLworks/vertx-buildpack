#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e


BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
BUILD_DIR=$1
CACHE_DIR=$2
LOG_DIR=.vblog
VERTX_DIR=.vertxdir
JDK_DIR=.jdk
GROOVY_DIR=.groovy

mkdir -p $BUILD_DIR/$LOG_DIR
touch $BUILD_DIR/$LOG_DIR/vertxbuildpack.log

log() {
  echo $1 >> $BUILD_DIR/$LOG_DIR/vertxbuildpack.log
  echo $1
}

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

log "Vertx Buildpack Compile Phase"

GROOVY_URL="http://dl.bintray.com/groovy/maven/groovy-binary-2.3.7.zip"

if [ ! -d "$CACHE_DIR/$GROOVY_DIR" ]; then
  echo "-----> Installing Groovy shell for json slurping (to $GROOVY_DIR)....."
  mkdir -p "$CACHE_DIR/$GROOVY_DIR"
  cd "$CACHE_DIR/$GROOVY_DIR"
  curl --max-time 180 --location $GROOVY_URL > groovybin.zip
  unzip groovybin.zip
  
  echo " done."
fi

cd $BUILD_DIR
if [ -d "$CACHE_DIR/$JDK_DIR" ]; then
  echo "copying jdk to app....."
  cp -r "$CACHE_DIR/$JDK_DIR" $BUILD_DIR
  echo " done."
fi

#TODO upgrade this to JDK8
OPENJDK7_URL="https://s3.amazonaws.com/heroku-jvm-langpack-java/openjdk7-u2-heroku-temaki.tar.gz"

if [ ! -d "$BUILD_DIR/$JDK_DIR" ]; then
  echo "-----> Installing OpenJDK7u2 build (to $JDK_DIR)....."
  mkdir "$BUILD_DIR/$JDK_DIR"
  cd "$BUILD_DIR/$JDK_DIR"
  curl --max-time 180 --location $OPENJDK7_URL | tar xz
  cd $BUILD_DIR
  cp -r $JDK_DIR $CACHE_DIR/$JDK_DIR
  echo " done."
fi

if [ -d "$CACHE_DIR/$VERTX_DIR" ]; then
  echo "copying vertx to app"
  cp -r "$CACHE_DIR/$VERTX_DIR" $BUILD_DIR
  echo " done."
fi

VERTX_URL="http://dl.bintray.com/vertx/downloads/vert.x-2.1.2.tar.gz"


if [ ! -d "$BUILD_DIR/$VERTX_DIR" ]; then
  echo "-----> Installing Vert.x build (to $VERTX_DIR)....."
  curl --max-time 320 --location $VERTX_URL | tar xz
  mv vert* $VERTX_DIR
  rm "$VERTX_DIR/bin/vertx.bat"
  cd $BUILD_DIR
  cp -r $VERTX_DIR $CACHE_DIR/$VERTX_DIR
  echo " done."
fi

export GROOVY_HOME=$CACHE_DIR/$GROOVY_DIR/groovy-2.3.7
export JAVA_HOME=$BUILD_DIR/$JDK_DIR
export PATH=$GROOVY_HOME/bin:$PATH:$JAVA_HOME/bin:$VERTX_HOME/bin
log "PATH=$PATH"

getStagingAttribute() {
  log `groovy $BIN_DIR/json.groovy $VCAP_APPLICATION $1`
}

createVertxModuleName() {
  log "$(getStagingAttribute space_name)~$(getStagingAttribute application_name)~1"
}

VERTX_MODULE=$(createVertxModuleName)
log "VERTX_MODULE=$VERTX_MODULE"


cd $BUILD_DIR
mkdir -p mods/$VERTX_MODULE

#mv app files into a mods/<package>~<appname>~1 dir. 
#This is the trick that makes the vertx runmod cmd work.
find . -maxdepth 1 ! -name "\.jdk" ! -name "Procfile" ! -name "\.vertxdir" ! -name "\." ! -name "mods" ! -name "\.vblog" -exec mv {} mods/$VERTX_MODULE/ \;


#The magic undocumented .profile.d dir!
#scripts are executed and the env vars such $HOME etc which only exist at 
#runtime will be appropriately replaced.
mkdir -p ${BUILD_DIR}/.profile.d
echo "export JAVA_HOME=\"\$HOME/$JDK_DIR\"" > ${BUILD_DIR}/.profile.d/javahome.sh
echo "export VERTX_HOME=\"\$HOME/$VERTX_DIR\"" > ${BUILD_DIR}/.profile.d/vertxhome.sh
echo "export PATH=\"\$HOME/$JDK_DIR/bin:\$HOME/$VERTX_DIR/bin:\$PATH\"" > ${BUILD_DIR}/.profile.d/path.sh


# Warn if no Procfile is present
if [ ! -f Procfile ]; then
  echo "-----> No Procfile found. Will use the following default process: "
  echo "       vertx runmod $VERTX_MODULE"
fi

if [ -f Procfile ]; then
  echo "Procfile found."
fi